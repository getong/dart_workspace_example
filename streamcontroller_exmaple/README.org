* StreamController Example

A sample command-line application with an entrypoint in =bin/=, library
code in =lib/=, and example unit test in =test/=.

** Overview

This project demonstrates various StreamController patterns in Dart, including:
- Basic stream creation and listening
- Stream transformations
- Broadcast streams with multiple listeners
- Periodic stream generation
- Proper resource cleanup

** Usage

*** Running the Example

#+begin_src bash
dart run
#+end_src

This will execute the main StreamController example showing:
- Creating a StreamController
- Adding data to streams
- Listening to stream events
- Stream transformations (mapping)
- Broadcast streams with multiple listeners
- Proper cleanup of resources

*** Key Features Demonstrated

**** Basic StreamController Operations
- Creating a =StreamController<String>=
- Adding data with =controller.add()=
- Listening with =controller.stream.listen()=
- Closing streams with =controller.close()=

**** Stream Transformations
- Using =map()= to transform stream data
- Chaining stream operations

**** Periodic Streams
- Creating time-based streams with =Timer.periodic=
- Proper lifecycle management with =onListen= and =onCancel=

**** Broadcast StreamController
- Creating a =StreamController<T>.broadcast()= for multiple listeners
- Adding multiple subscriptions to the same stream
- Dynamic listener management (adding/removing listeners)
- Broadcasting data to all active listeners simultaneously

*** Library Functions

The =lib/streamcontroller_exmaple.dart= provides utility functions:

- =runStreamExample()= - Demonstrates stream transformations
- =createController<T>()= - Generic controller factory
- =createPeriodicStream<T>()= - Creates time-based streams

*** Example Output

#+begin_example
StreamController Example

Received: Hello
Received: World
Received: StreamController
Stream closed

Library example:
Doubled: 2
Doubled: 4
Doubled: 6
Doubled: 8
Doubled: 10

Broadcast StreamController example:
Broadcasting data...
Listener 1 received: 10
Listener 2 received: 10
Listener 3 received: 10
Listener 1 received: 20
Listener 2 received: 20
Listener 3 received: 20
Listener 1 received: 30
Listener 2 received: 30
Listener 3 received: 30

Removing listener 2...
Listener 1 received: 40
Listener 3 received: 40
Broadcast example completed
#+end_example

** StreamController Types

*** Single Subscription Streams
- Default =StreamController()= allows only one listener
- Attempting to add multiple listeners throws an exception
- Suitable for point-to-point communication

*** Broadcast Streams
- =StreamController.broadcast()= allows multiple listeners
- Each listener receives all events independently
- Suitable for event broadcasting scenarios
- Listeners can be added/removed dynamically
